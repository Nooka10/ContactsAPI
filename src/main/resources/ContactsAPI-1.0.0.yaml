---
openapi: 3.0.0
info:
  title: Contacts API
  description: This is the Contact API for Open Web Technology Hiring Test.
  contact:
    email: mails@benoitschopfer.ch
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
security:
  - oauth2: [ user, admin ]
tags:
  - name: users
    description: Users endpoints
  - name: contacts
    description: Contacts endpoints
  - name: skills
    description: Skills endpoints
  - name: contactSkills
    description: Skills endpoints of a precise contact
  - name: login
    description: Login and register endpoints
paths:
  /login:
    post:
      security: [ ]
      tags:
        - login
      summary: Logs in an user
      description: Logs in an user with oauth authentication
      operationId: login
      requestBody:
        description: A JSON object containing the username and the password of the user to log in
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToAdd"
        required: true
      responses:
        200:
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Invalid input, received object is invalid
        401:
          description: Unauthorized, login failed
        404:
          description: User not found, unknown username
  /register:
    post:
      security: [ ]
      tags:
        - login
      summary: Register a new user
      description: Register a new user in the system and logs him in
      operationId: register
      requestBody:
        description: A JSON object containing the username and the password of the new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToAdd"
        required: true
      responses:
        201:
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Invalid input, received object is invalid
        409:
          description: This email adress is already used

  /contacts:
    get:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contacts
      summary: Get all contacts
      description: A user can get his contacts. An admin can get all contacts.
      operationId: getContacts
      parameters:
        - name: name
          in: query
          description: Returns all contacts whose firstname or lastname contains the received string
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: Returns all contacts whose email contains the received string
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Every contacts of the connected user and matching criterias
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: bad input parameter
    post:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contacts
      summary: Adds a new contact
      description: Adds a new contact for the connected user
      operationId: addContact
      requestBody:
        description: Contact to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactToAdd"
      responses:
        201:
          description: Contact created
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: Invalid input, received object is invalid
        409:
          description: This email adress is already used
  /contacts/{id}:
    parameters:
      - name: id
        in: path
        description: Id of the contact to fetch
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
    get:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contacts
      summary: Get contact by id
      description: Returns the contact corresponding to the received id of the connected user
      operationId: getContact
      responses:
        200:
          description: Returns the contact corresponding to the received id of the connected user
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: bad input parameter
    put:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contacts
      summary: Update an existing contact
      description: Update an existing contact of the connected user
      operationId: updateContact
      requestBody:
        description: Contact to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactToUpdate"
      responses:
        200:
          description: contact succesfully updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: Invalid contact supplied
        404:
          description: Contact not found
    delete:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contacts
      summary: Delete an existing contact
      description: Delete an existing contact of the connected user
      operationId: deleteContact
      responses:
        204:
          description: contact succesfully deleted
        404:
          description: Contact not found
  /contacts/{contactId}/skills/{skillId}:
    parameters:
      - name: contactId
        in: path
        description: Id of the contact to fetch
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: skillId
        in: path
        description: Id of the skill to modify or delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
    post:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contactSkills
      summary: Adds a new skill level to a contact
      description: Adds a new skill to a contact of the connected user.
      operationId: addContactSkill
      requestBody:
        description: SkillLevel to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillLevelToAdd"
      responses:
        201:
          description: Contact's skill level succesfully created
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: Invalid input, received object is invalid
        409:
          description: This skill is already in the system
    put:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contactSkills
      summary: Update a skill of a contact
      description: Update the skill level of an existing contact of the connected user
      operationId: updateContactSkill
      requestBody:
        description: Skill level to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillLevelToUpdate"
      responses:
        200:
          description: Contact's skill level succesfully updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Contact"
        400:
          description: Invalid skill lever supplied
        404:
          description: Contact or skill not found
    delete:
      security:
        - oauth2: [ user, admin ]
      tags:
        - contactSkills
      summary: Delete a skill of an existing contact
      description: Delete a skill of an existing contact of the connected user
      operationId: deleteContactSkill
      responses:
        204:
          description: contact's skill succesfully deleted
        404:
          description: Contact not found
  /skills:
    get:
      security:
        - oauth2: [ user, admin ]
      tags:
        - skills
      summary: Get all skills
      description: By passing in the appropriate options, you can search for specifics skills in the system
      operationId: getSkills
      parameters:
        - name: name
          in: query
          description: Returns all skills whose name contains the received string
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Returns all skills whose name contains the received string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
        400:
          description: bad input parameter
    post:
      security:
        - oauth2: [ admin ]
      tags:
        - skills
      summary: Adds a new skill
      description: Adds a new skill to the system. The connected user must be an admin
      operationId: addSkill
      requestBody:
        description: Skill to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillToAdd"
      responses:
        201:
          description: Skill created
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Skill"
        400:
          description: Invalid input, received object is invalid
        409:
          description: This skill is already in the system
  /skills/{name}:
    parameters:
      - name: name
        in: path
        description: Name of the skill to fetch
        required: true
        style: simple
        explode: false
        schema:
          type: string
    get:
      security:
        - oauth2: [ user, admin ]
      tags:
        - skills
      summary: Get skill by name
      description: Returns the skill corresponding to the received name
      operationId: getSkill
      responses:
        200:
          description: Returns the skill corresponding to the received name
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Skill"
        400:
          description: bad input parameter
    put:
      security:
        - oauth2: [ admin ]
      tags:
        - skills
      summary: Update an existing skill
      description: Update an existing skill. The connected user must be an admin
      operationId: updateSkill
      requestBody:
        description: Skill to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillToUpdate"
      responses:
        200:
          description: skill succesfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
        400:
          description: Invalid skill supplied
        404:
          description: Skill not found
    delete:
      security:
        - oauth2: [ admin ]
      tags:
        - skills
      summary: Delete an existing skill
      description: Delete an existing skill. The connected user must be an admin
      operationId: deleteSkill
      responses:
        204:
          description: Skill succesfully deleted
        404:
          description: Skill not found

  /users:
    get:
      security:
        - oauth2: [ admin ]
      tags:
        - users
      summary: Get all users
      description: By passing in the appropriate options, admins can search for specifics users in the system
      operationId: getUsers
      parameters:
        - name: username
          in: query
          description: Returns all users whose username contains the received string
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Returns all users whose username contains the received string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: bad input parameter
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: Id of the user to fetch
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
    get:
      security:
        - oauth2: [ user, admin ]
      tags:
        - users
      summary: Get user by id
      description: Returns the user corresponding to the received name. It can only be himself if the connected user is a normal user. It can be any user if the connected user is an admin
      operationId: getUser
      responses:
        200:
          description: the user corresponding to the received id
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: bad input parameter
    put:
      security:
        - oauth2: [ user, admin ]
      tags:
        - users
      summary: Update an existing user
      description: Update the connected user. It can only be himself if the connected user is a normal user. It can be any user if the connected user is an admin
      operationId: updateUser
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToAddOrUpdate"
      responses:
        200:
          description: User succesfully updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      security:
        - oauth2: [ user, admin ]
      tags:
        - users
      summary: Delete an existing user
      description: Delete the connected user. Only an admin can delete other user than himself.
      operationId: deleteUser
      responses:
        204:
          description: User succesfully deleted
        404:
          description: User not found


components:
  schemas:
    ContactToAdd:
      type: object
      required:
        - firstname
        - lastname
        - email
      properties:
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        mobilephone:
          type: string
          format: a phone number
    ContactToUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        mobilephone:
          type: string
          format: a phone number
    Contact:
      type: object
      required:
        - id
        - firstname
        - lastname
        - fullname
        - address
        - email
        - mobilephone
        - linkedUser
        - skills
      properties:
        id:
          type: integer
          format: int32
        firstname:
          type: string
        lastname:
          type: string
        fullname:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        mobilephone:
          type: string
          format: a phone number
        linkedUser:
          $ref: "#/components/schemas/User"
        skills:
          type: array
          items:
            $ref: "#/components/schemas/SkillLevel"
    SkillToAdd:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: SpringBoot
    SkillToUpdate:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: SpringBoot
    Skill:
      type: object
      required:
        - id
        - name
        - usersLevels
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: SpringBoot
        usersLevels:
          type: array
          items:
            $ref: "#/components/schemas/SkillLevel"
    SkillLevelToAdd:
      type: object
      required:
        - skill
        - level
      properties:
        skill:
          $ref: "#/components/schemas/Skill"
        level:
          type: number
          format: int32
    SkillLevelToUpdate:
      type: object
      required:
        - level
      properties:
        level:
          type: number
          format: int32
    SkillLevel:
      type: object
      required:
        - id
        - skill
        - level
        - skilledContact
      properties:
        id:
          type: integer
          format: int32
        skill:
          $ref: "#/components/schemas/Skill"
        level:
          type: number
          format: int32
        skilledContact:
          $ref: "#/components/schemas/Contact"
    UserToAdd:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    UserToAddOrUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
        password:
          type: string
    User:
      type: object
      required:
        - id
        - email
        - password
        - contacts
        - rights
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
        password:
          type: string
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
        rights:
          type: string

  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: localhost:3000/oauth/authorize
          tokenUrl: localhost:3000/oauth/token
          scopes:
            user: Grants read/write access to user resources (his user info, his contacts and their skills).
            admin: Grants read and write access to anything (his/others contacts and their skills, skills, users)
